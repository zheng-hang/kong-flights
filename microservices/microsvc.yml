version: '3.8'

networks:
  my-network:
    name: my-network


volumes:
  rabbitmq_data:

services:

# RabbitMQ: Msging broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-mgmt
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3




# Bookings: Update Availablitiy, Insert Seat, Get seat
  bookings:
    build:
      context: ./
      dockerfile: bookings.dockerfile
    image: warkionw/bookings:esd
    restart: always
    ports:
      - "5000:5000"
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      exchangename: notif_topic
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:3312/bookings_db
      PYTHONUNBUFFERED: 1
    networks:
      - my-network
    


# Flights: service
  # flight:
  #   build:
  #     context: ./
  #     dockerfile: flight.DockerFile
  #   image: warkionw/flight:esd
  #   restart: always
  #   ports:
  #     - "5001:5000"
  #   environment:
  #     dbURL: mysql+mysqlconnector://root:root@host.docker.internal:3310/flights_db
  #     PYTHONUNBUFFERED: 1
  #   networks:
  #     - my-network


# Passenger Microservice
  passenger:
    build:
      context: ./
      dockerfile: passenger.dockerfile
    image: warkionw/passenger:esd
    restart: always
    ports:
      - "5002:5000"
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:3311/passengers_db
      PYTHONUNBUFFERED: 1
    networks:
      - my-network

# # Seat
#   seat:
#     build:
#       context: ./
#       dockerfile: seat.dockerfile
#     image: ray/seat:esd
#     restart: always
#     ports:
#       - "5003:5000"
#     depends_on:
#       - rabbitmq
#     environment:
#       dbURL: mysql+mysqlconnector://root:root@host.docker.internal:3313/seats_db
#       PYTHONUNBUFFERED: 1
#     networks:
#       - my-network



# # Make Booking Complex Microservice
# # AMQP calls to: Seat, Booking, Notif
# # Get: Flight
# # Post: Payment

#   make_booking:
#     build:
#       context: ./
#       dockerfile: makebooking.Dockerfile
#     image: warkionw:esd
#     restart: always
#     depends_on:
#       - booking
#       - seat
#       - flight
#       - payment
#       - notif
#       - rabbitmq
#     environment:
#       rabbit_host: rabbitmq
#       rabbit_port: 5672
#       flight_URL: http://flight:5000/flight/price/ 
#       seat_exchangename: seat_topic
#       booking_exchangename: booking_topic
#       notif_exchangename: notif_topic
#       payment_URL: PAYMENT URL
#       PYTHONUNBUFFERED: 1
#     ports:
#       - "5100:5100"


# # Payment/Paypal access API Microservice
#   payment:
#     build:
#       context: ../payment_paypal
#       dockerfile: ../payment_paypal/payment.dockerfile
#     ports:
#       - "8888:8888"
#     volumes:
#       - ../payment_paypal/standard-integration:/app/standard-integration
#     networks:
#       - my-network


# Lufthansa API calling
  lufthansa:
    build:
      context: ./lufthansa
      dockerfile: lufthansa.dockerfile
    image: warkionw/lufthansa:esd
    restart: always
    ports:
      - "5004:5000"
    environment:
      PYTHONUNBUFFERED: 1
    networks:
      - my-network


# Ryanair Calling

  ryanair:
    build:
      context: ./ryanair
      dockerfile: ryanair.dockerfile
    image: warkionw/ryanair:esd
    restart: always
    ports:
      - "5005:5000"
    environment:
      PYTHONUNBUFFERED: 1
    networks:
      - my-network


###############################################
# Scraper: The Scraper microservice
###############################################
  # scraper:
  #   build:
  #     context: ./scraper
  #     dockerfile: scraper.dockerfile
  #   image: warkionw/scraper:esd
  #   restart: always
  #   depends_on:
  #     - lufthansa
  #     - ryanair
  #     - flight
  #   environment:
  #     ryanair_URL: http://host.docker.internal:5005/getFRflights/today
  #     lufthansa_URL: http://host.docker.internal:5004/getLHflights/today
  #     flight_URL: http://host.docker.internal:5001/insertflights
  #     PYTHONUNBUFFERED: 1
  #   ports:
  #     - "5104:5100"
  


# # testing amqp in bookings & flight
#   testamqp:
#     build:
#       context: ./
#       dockerfile: amqptest.dockerfile
#     image: warkionw/testamqp:esd
#     restart: always
#     depends_on:
#       - rabbitmq
#       - bookings
#     environment:
#       rabbit_host: rabbitmq
#       rabbit_port: 5672
#       exchangename_booking: booking_topic
#       exchangename_flight: flight_topic
#       exchangetype: topic
#       PYTHONUNBUFFERED: 1
#     ports:
#       - "5100:5100"
#     networks:
#       - my-network


# #test seat amqp
#   testseatamqp:
#     build:
#       context: ./
#       dockerfile: seatamqptest.dockerfile
#     image: ray/testseatamqp:esd
#     restart: always
#     depends_on:
#       - rabbitmq
#       - seat
#     environment:
#       rabbit_host: rabbitmq
#       rabbit_port: 5672
#       exchangename: seat_topic
#       exchangetype: topic
#       PYTHONUNBUFFERED: 1
#     ports:
#       - "5101:5101"
#     networks:
#       - my-network



###############################################
# seatchange: The seat change microservice
###############################################
  # seatchange:
  #   build:
  #     context: ./
  #     dockerfile: seatchange.Dockerfile
  #   image: rayjiet/seatchange:esd
  #   restart: always
  #   depends_on:
  #     - rabbitmq
  #     - seat
  #     - bookings
  #     # - payment
  #     # - notification
  #   environment:
  #     rabbit_host: rabbitmq
  #     rabbit_port: 5672
  #     seat_URL: http://localhost:5000/seat
  #     passengerbooking_URL: "http://localhost:5000/booking"
  #     # notification_URL: "http://localhost:5000/notification"
  #     # payment_URL: "http://localhost:5000/payment"
  #     PYTHONUNBUFFERED: 1
  #   ports:
  #     - "5103:5103"
      # networks:
      # - my-network


###############################################
# test_seatchange: The seat change microservice
###############################################
  # test_seatchange:
  #   build:
  #     context: ./
  #     dockerfile: test_seatchange.Dockerfile
  #   image: rayjiet/test_seatchange:esd
  #   restart: always
  #   depends_on:
  #     - rabbitmq
  #     - seat
  #     - bookings
  #     # - payment
  #     # - notification
  #   environment:
  #     rabbit_host: rabbitmq
  #     rabbit_port: 5672
  #     seat_URL: http://localhost:5000/seat
  #     passengerbooking_URL: "http://localhost:5000/booking"
  #     # notification_URL: "http://localhost:5000/notification"
  #     # payment_URL: "http://localhost:5000/payment"
  #     PYTHONUNBUFFERED: 1
  #   ports:
  #     - "5105:5105"
    # networks:
      # - my-network