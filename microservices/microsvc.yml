version: '3.8'

networks:
  my-network:
    name: my-network


volumes:
  rabbitmq_data:

services:

###############################################
# # RabbitMQ: Messaging broker
# # RabbitMQ: Messaging broker
###############################################
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-mgmt
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3


###############################################
  bookings:
    build:
      context: ./
      dockerfile: bookings.dockerfile
    image: warkionw/bookings:esd
    restart: always
    ports:
      - "5000:5000"
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      exchangename: notif_topic
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:3310/flights_db
      newBooking_URL: http://bookings:5000/newbooking
      PYTHONUNBUFFERED: 1
    networks:
      - my-network
    
    

###############################################
# # Flights: service
# # Flights: service
###############################################
  flight:
    build:
      context: ./
      dockerfile: flight.DockerFile
    image: warkionw/flight:esd
    restart: always
    ports:
      - "5001:5000"
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:3310/smoothairlines
      PYTHONUNBUFFERED: 1
    networks:
      - my-network


###############################################
# # Seat Microservice
###############################################
  seat:
    build:
      context: ./
      dockerfile: seat.dockerfile
    image: ray/seat:esd
    restart: always
    ports:
      - "5003:5000"
    depends_on:
      - rabbitmq
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:3310/smoothairlines
      PYTHONUNBUFFERED: 1
    networks:
      - my-network


###############################################
# # Passenger Microservice
###############################################
  passenger:
    build:
      context: ./
      dockerfile: passenger.dockerfile
    image: warkionw/passenger:esd
    restart: always
    ports:
      - "5002:5000"
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:3310/smoothairlines
      PYTHONUNBUFFERED: 1
    networks:
      - my-network



###############################################
# # Make Booking Complex Microservice
# # AMQP calls to: Seat, Booking, Notif
# # Get: Flight
# # Post: Payment
###############################################


  ngrok:
      image: ngrok/ngrok:alpine
      volumes:
        - ../ngrok/ngrok.yml:/app/ngrok.yml
      command:
        - start
        - --all
        - --config
        - /app/ngrok.yml
      networks:
        - my-network

  make_booking:
    build:
      context: ./
      dockerfile: makebooking.dockerfile
    image: warkionw:esd
    restart: always
    depends_on:
      - bookings
      - seat
      - flight
      # - payment
      # - notif
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      flight_URL: http://flight:5000/flight/price/ 
      seatReserve_URL: http://seat:5000/reserveseat
      seatUpdate_URL: http://seat:5000/updateseat
      newBooking_URL: http://bookings:5000/newbooking
      # seat_exchangename: seat_topic
      # booking_exchangename: booking_topic
      # payment_URL: http://payment-service:5000/
      notif_exchangename: notif_topic
      # payment_URL: http://payment-service:5000/
      PYTHONUNBUFFERED: 1
    ports:
      - "5100:5100"
    networks:
      - my-network


# Lufthansa API calling
  lufthansa:
    build:
      context: ./lufthansa
      dockerfile: lufthansa.dockerfile
    image: warkionw/lufthansa:esd
    restart: always
    ports:
      - "5004:5000"
    environment:
      PYTHONUNBUFFERED: 1
    networks:
      - my-network

# Ryanair Calling

#ryanair
  ryanair:
    build:
      context: ./ryanair
      dockerfile: ryanair.dockerfile
    image: warkionw/ryanair:esd
    restart: always
    ports:
      - "5006:5000"
    environment:
      PYTHONUNBUFFERED: 1
    networks:
      - my-network

###############################################
# Scraper: The Scraper microservice
###############################################
  scraper:
    build:
      context: ./scraper
      dockerfile: scraper.dockerfile
    image: warkionw/scraper:esd
    restart: always
    depends_on:
      - lufthansa
      - ryanair
      - flight
    environment:
      ryanair_URL: http://host.docker.internal:5005/getFRflights/today
      lufthansa_URL: http://host.docker.internal:5004/getLHflights/today
      flight_URL: http://host.docker.internal:5001/insertflights
      PYTHONUNBUFFERED: 1
    ports:
      - "5104:5100"


###############################################
# seatchange: The seat change microservice
###############################################
  seatchange:
    build:
      context: ./
      dockerfile: seatchange.dockerfile
    image: rayjiet/seatchange:esd
    restart: always
    depends_on:
      - rabbitmq
      - seat
      - bookings
      # - payment
      - notifications
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      seatReserve_URL: http://host.docker.internal:5003/reserveseat
      seatUpdate_URL: http://host.docker.internal:5003/updateseat
      passengerbooking_URL: http://host.docker.internal:5000/update
      # payment_URL: "http://localhost:5000/payment"
      PYTHONUNBUFFERED: 1
    ports:
      - "5102:5100"
    networks:
      - my-network


# Notifications: send email for bookings, seatchange,  
  notifications:
    build:
      context: ./
      dockerfile: notifications.dockerfile
    image: bran/notifications:esd
    restart: always
    depends_on:
      - rabbitmq
    ports:
      - "5005:5000"
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      seatReserve_URL: http://seat:5000/reserveseat
      seatUpdate_URL: http://seat:5000/updateseat
      passengerbooking_URL: http://bookings:5000/update
      # payment_URL: "http://localhost:5000/payment"
      payment_url: http://payment-service:5000/
      PYTHONUNBUFFERED: 1
    networks:
      - my-network


    