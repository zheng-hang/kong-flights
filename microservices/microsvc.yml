version: '3.8'

networks:
  my-network:
    name: my-network


volumes:
  rabbitmq_data:

services:

# RabbitMQ: Msging broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-mgmt
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3


# testing amqp in bookings
  # testamqp:
  #   build:
  #     context: ./
  #     dockerfile: amqptest.dockerfile
  #   image: warkionw/testamqp:esd
  #   restart: always
  #   depends_on:
  #     - rabbitmq
  #     - bookings
  #   environment:
  #     rabbit_host: rabbitmq
  #     rabbit_port: 5672
  #     exchangename_booking: booking_topic
  #     exchangename_flight: flight_topic
  #     exchangetype: topic
  #     PYTHONUNBUFFERED: 1
  #   ports:
  #     - "5100:5100"
  #   networks:
  #     - my-network


# Seat Selection: Update Availablitiy, Insert Seat, Get seat
  bookings:
    build:
      context: ./
      dockerfile: bookings.dockerfile
    image: warkionw/bookings:esd
    restart: always
    ports:
      - "5000:5000"
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      booking_queue_name: BookingUpdate
      exchangename: notif_topic
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:3312/bookings_db
      PYTHONUNBUFFERED: 1
    networks:
      - my-network
    


# Flights: service
  flight:
    build:
      context: ./
      dockerfile: flight.DockerFile
    image: warkionw/flight:esd
    restart: always
    ports:
      - "5001:5000"
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      flight_queue_name: FlightInsert
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:3310/flights_db
      PYTHONUNBUFFERED: 1
    networks:
      - my-network


# Passenger Microservice
  passenger:
    build:
      context: ./
      dockerfile: passenger.dockerfile
    image: warkionw/passenger:esd
    restart: always
    ports:
      - "5002:5000"
    environment:
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:3311/passengers_db
      PYTHONUNBUFFERED: 1
    networks:
      - my-network

# Seat
  seat:
    build:
      context: ./
      dockerfile: seat.dockerfile
    image: ray/seat:esd
    restart: always
    ports:
      - "5003:5000"
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      booking_queue_name: SeatUpdate
      dbURL: mysql+mysqlconnector://root:root@host.docker.internal:3313/seats_db
      PYTHONUNBUFFERED: 1
    networks:
      - my-network

# #test seat amqp
#   testseatamqp:
#     build:
#       context: ./
#       dockerfile: flight.DockerFile
#     image: warkionw/flight:esd
#       dockerfile: seatamqptest.dockerfile
#     image: ray/testseatamqp:esd
#     restart: always
#     depends_on:
#       - rabbitmq
#       - seat
#     environment:
#       rabbit_host: rabbitmq
#       rabbit_port: 5672
#       exchangename: seat_topic
#       exchangetype: topic
#       PYTHONUNBUFFERED: 1
#     ports:
#       - "5101:5101"
#     networks:
#       - my-network
